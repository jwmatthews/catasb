#
# We are looking up the ec2 facts and storing them in a host variable
# so a later play can retrieve the data.
#

- hosts: tag_Name_{{ instance_lookup_value }}
  gather_facts: False
  roles:
    - { role: awsservicebroker_prep, when: deploy_awsservicebroker == True}

- hosts: localhost
  gather_facts: True
  tasks:
    - name: EC2 proxy remote facts
      ec2_remote_facts:
        filters:
          instance-state-name: running
          "tag:Name": "{{ proxy_instance_name }}"
        region: "{{ aws_region }}"
      register: proxy_ec2_facts
      when: ec2_use_proxy

    - name: Record squid proxy IP addresses
      set_fact:
        proxy_public_ip: "{{ proxy_ec2_facts.instances[0].public_ip_address }}"
        proxy_private_ip: "{{ proxy_ec2_facts.instances[0].private_ip_address }}"
      when: ec2_use_proxy

- hosts: localhost
  gather_facts: True
  tasks:
    - name: EC2 Remote Facts
      ec2_remote_facts:
        filters:
          instance-state-name: running
          "tag:Name": "{{ instance_name }}"
        region: "{{ aws_region }}"
      register: my_ec2_facts

- hosts: tag_Name_{{ instance_lookup_value }}
  gather_facts: True
  become: True
  pre_tasks:
    - name: Setting fact of security group id
      set_fact:
        my_security_group_id: "{{ hostvars.localhost.my_ec2_facts.instances[0].groups[0].id }}"
  vars_prompt:
    - name: dockerhub_org
      prompt: "Enter the dockerhub organization you'd like to pull images from: "
      private: no
  roles:
    - { role: openshift_proxy_setup, when: ec2_use_proxy == True }
    - { role: ssl_setup, when: use_ssl == True }
    - { role: "{{ cluster }}_setup", reset_cluster: True }
    - { role: ansible_service_broker_setup, when: deploy_asb == True}
    - { role: awsservicebroker_setup, when: deploy_awsservicebroker == True}
  post_tasks:
    - set_fact:
        msg: |
            EC2 Instance Tags:         Name={{ instance_name }}
            Hostname:                  {{ hostname }}
            SSH Key Name:              {{ ssh_key_name }}
            Region:                    {{ aws_region }}
            Next steps:
            Web: https://{{ hostname }}:8443
            CLI: oc login --insecure-skip-tls-verify {{ hostname }}:8443 -u {{ cluster_user }} -p {{ cluster_user_password }}
    - debug:
        msg: "{{ msg.split('\n') }}"
