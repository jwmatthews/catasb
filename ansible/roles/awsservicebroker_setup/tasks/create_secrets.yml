---

  - name: Install/update 'apb tools' package on (RedHat OS Env)
    yum:
      name: "apb"
      state: latest
    become: True
    when: ansible_os_family == "RedHat"

  - name: Install pip (for Non-RedHat OS Env)
    easy_install:
      name: pip
      state: latest
    become: True
    when: ansible_os_family != "RedHat"

  - name: pip install apb (for Non-RedHat OS Env)
    pip:
      name: apb
      state: latest
    become: True
    when: ansible_os_family != "RedHat"

  - name: Download the 'create_broker_secret.py' script to "{{ create_broker_secret_script }}"
    get_url:
      url: "{{ create_broker_secret_file_url }}"
      dest: "{{ create_broker_secret_script }}"
      force: yes
      mode: 0755

  - name: Create the AWS Parameters file "{{ awsservicebroker_parameters_file }}"
    template:
      src: parameters.j2
      dest: "{{ awsservicebroker_parameters_file }}"

  - name: Create AWS ASB Secrets for all AWS APBs
    shell: "{{ create_broker_secret_script }} {{ awsservicebroker_asb_secret_name }} {{ awsservicebroker_asb_project }} {{ awsservicebroker_broker_registry_url }}/{{ awsservicebroker_dockerhub_org }}/{{ item }} @{{ awsservicebroker_parameters_file }}"
    with_items:
      - sqs-apb
      - sns-apb
      - r53-apb
      - rds-apb
      - emr-apb
      - redshift-apb
      - elasticache-apb
      - dynamodb-apb
      - s3-apb
      - athena-apb
    register: command_result
    failed_when: "'FAILED' in command_result.stderr"

  - name: Restarting the ASB pod
    shell: "{{ oc_cmd }} rollout latest aws-asb"

  - name: Get name of latest RC for aws-asb
    shell: "{{ oc_cmd }} get rc --no-headers --sort-by=\".metadata.name\" -n {{ awsservicebroker_asb_project }} | grep -v etcd | tail -n1|awk '{print $1}'"
    register: rc_latest_name

  - name: Waiting for the ASB pod to restart
    shell: "{{ oc_cmd }} get pods -n {{ awsservicebroker_asb_project }} | grep  {{ rc_latest_name.stdout }} | grep -v deploy | grep -iEm1 'asb.*?running'"
    register: wait_for_asb_pod
    until: wait_for_asb_pod.rc == 0
    retries: 10
    delay: 10

  - name: Get the ASB Pod name
    shell: "{{ oc_cmd }} get pods -n {{ awsservicebroker_asb_project }} | grep {{ rc_latest_name.stdout }} | awk '{print $1}' | grep -v deploy"
    register: asb_pod_name

  - debug: var=asb_pod_name.stdout

  - name: Do 'apb relist' and wait until ASB pod has filtered the 'aws_access_key'
    shell: "{{ apb_tools_cmd }} relist --broker-name {{ awsservicebroker_broker_name }} && {{ oc_cmd }} logs {{ asb_pod_name.stdout }} -c aws-asb | grep 'EXTRA string=aws_access_key'"
    register: wait_for_aws_asb_filter_msg
    until: wait_for_aws_asb_filter_msg.rc == 0
    retries: 10
    delay: 10

  - name: Download the 'refresh_broker_resoure.py' script to "{{ refresh_broker_resoure_script }}"
    get_url:
      url: "{{ refresh_broker_resoure_file_url }}"
      dest: "{{ refresh_broker_resoure_script }}"
      force: yes
      mode: 0755

  - name: Run '{{ refresh_broker_resoure_script }}'
    shell: "{{ refresh_broker_resoure_script }} {{ awsservicebroker_broker_name }}"
    register: command_result
    failed_when: "'FAILED' in command_result.stderr"
