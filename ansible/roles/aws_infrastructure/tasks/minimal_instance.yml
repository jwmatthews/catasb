---
  - set_fact:
      host_fqdn: "{{ aws_custom_prefix }}.{{ target_dns_zone }}"
      wildcard_entry: "*.{{ aws_custom_prefix }}.{{ target_dns_zone }}"

  - name:  Create EC2 instance for OpenShift
    ec2:
      key_name: "{{ ssh_key_name }}"
      instance_type: "{{ instance_type }}"
      instance_tags:
        Name: "{{ instance_name }}"
      image: "{{ aws_ami_id }}"
      wait: yes
      exact_count: 1
      count_tag:
        Name: "{{ instance_name }}"
      group_id:
        - "{{ my_sec_group.group_id }}"
        - "{{ sec_group_outbound_direct.group_id }}"
      vpc_subnet_id: "{{ public_subnet_a_id }}"
      assign_public_ip: yes
      region: "{{ aws_region }}"
    register: instance_result
    when: not ec2_use_proxy

  - set_fact:
      my_ec2_instances: "{{ instance_result }}"
    when: not ec2_use_proxy

  - name:  Create EC2 instance for OpenShift with proxied internet access
    ec2:
      key_name: "{{ ssh_key_name }}"
      instance_type: "{{ instance_type }}"
      instance_tags:
        Name: "{{ instance_name }}"
      image: "{{ aws_ami_id }}"
      wait: yes
      exact_count: 1
      count_tag:
        Name: "{{ instance_name }}"
      group_id:
        - "{{ my_sec_group.group_id }}"
      vpc_subnet_id: "{{ public_subnet_a_id }}"
      assign_public_ip: yes
      region: "{{ aws_region }}"
    register: proxied_instance_result
    when: ec2_use_proxy

  - set_fact:
      my_ec2_instances: "{{ proxied_instance_result }}"
    when: ec2_use_proxy

  - name: Create EBS volumes for /tmp, docker_vg, /var/lib/docker, /persistedvolumes
    async: 200
    register: ebs_volume_creations
    poll: 0
    ec2_vol:
      instance: "{{ my_ec2_instances.tagged_instances[0].id }}"
      volume_size: "{{ item.volume_size }}"
      region: "{{ aws_region }}"
      device_name: "{{ item.device_name }}"
      delete_on_termination: yes
    with_items:
      - { device_name: '{{ tmp_ebs_device_name }}', volume_size: 50 }
      - { device_name: '{{ docker_vg_ebs_device_name }}', volume_size: 250 }
      - { device_name: '{{ var_lib_docker_ebs_device_name }}', volume_size: 100 }
      - { device_name: '{{ persistedvol_ebs_device_name }}', volume_size: 100 }

  - name: Wait for EBS volumes to finish creating
    async_status: jid={{ item.ansible_job_id }}
    register: result
    until: result.finished
    retries: 10
    delay: 10
    with_items: '{{ ebs_volume_creations.results }}'

  - name: Associate Elastic IP
    ec2_eip:
      device_id: "{{ my_ec2_instances.tagged_instances[0].id }}"
      region: "{{ aws_region }}"
      in_vpc: yes
      reuse_existing_ip_allowed: yes
    register: my_eip

  - name: Set DNS Record '{{ host_fqdn }}' for New Instance to Elastic IP {{ my_eip.public_ip }}
    route53: >
      command=create
      zone="{{ target_dns_zone }}"
      record="{{ host_fqdn }}"
      type=A
      ttl=60
      overwrite=yes
      value="{{ my_eip.public_ip }}"

  - name: Set DNS Record '{{ wildcard_entry }}' to Elastic IP {{ my_eip.public_ip }}
    route53: >
      command=create
      zone="{{ target_dns_zone }}"
      record="{{ wildcard_entry }}"
      type=A
      ttl=60
      overwrite=yes
      value="{{ my_eip.public_ip }}"

  - name: Create RDS Subnet Group with {{ vpc_subnet_a_name }} and {{ vpc_subnet_b_name }}
    rds_subnet_group:
      state: "{{ state }}"
      name: "{{ rds_subnet_group_name }}"
      region: "{{ aws_region }}"
      description: RDS Subnet Group for {{ aws_tag_prefix }}
      subnets:
        - "{{ public_subnet_a_id }}"
        - "{{ public_subnet_b_id }}"

  - name: Wait for SSH to come up on {{ my_eip.public_ip }}
    wait_for:
      host: "{{ my_eip.public_ip }}"
      port: 22
      delay: 0
      timeout: 320
      state: started

  # Setting as a fact so we can read it later out of this role
  - name: Setting facts of EC2 instance to be read later
    set_fact:
      ec2_instances:  "{{ my_ec2_instances }}"
      elastic_ip:     "{{ my_eip }}"
