---
ssh_key_name: ""
target_dns_zone: ""
aws_custom_prefix: ""
instance_name: ""
instance_lookup_value: ""
aws_username: "ec2-user"
ec2_install: true
ec2_type: ""
ec2_use_proxy: false

#aws_tag_prefix is used to name the various VPC resources so they are only created once per account
#even if shared with multiple IAM users
aws_tag_prefix: "test_awsdemo"

# AWS Role ARN name
aws_role_arn_name: "aws-broker-cloudformation"

##
# us-east-1
##
aws_region: us-east-1
aws_ami_id: ami-26ebbc5c

##
# us-east-2
##
#aws_region: us-east-2
#aws_ami_id: ami-0b1e356e

##
# us-west-1
##
#aws_region: us-west-1
#aws_ami_id:  ami-77a2a317

##
# us-west-2
##
#aws_region: us-west-2
#aws_ami_id: ami-223f945a

##
# Canada
##
#aws_region: ca-central-1
#aws_ami_id: ami-c1cb4ea5

instance_type: c4.4xlarge
proxy_instance_type: m4.large

# For local setup, especially on Mac the hostname will be
# different from the routing_suffix. We expect the hostname for
# Mac to be the public IP. This is needed so oc cluster up and
# can ensure it's listening on the correct interface.
#
# For ec2 runs this is less important to differentiate and we expect
# hostname and openshift_routing_suffix to be the same
#
hostname: "{{aws_custom_prefix}}.{{target_dns_zone}}"
openshift_routing_suffix: "{{aws_custom_prefix}}.{{target_dns_zone}}"
cluster_url: "{{ hostname }}:8443"

use_ssl: True
update_cgroup_driver: False
email_address: "foo@bar.com"

var_lib_docker_ebs_device_name: "sdc"
var_lib_docker_block_device: "/dev/xvdc"
var_lib_docker_mount_point: "/var/lib/docker"

docker_vg_ebs_device_name: "sdd"
docker_vg_block_device: "/dev/xvdd"
docker_vg_name: "docker_vg"

persistent_vol_ebs_device_name: "sde"
persistent_vol_block_device: "/dev/xvde"

tmp_ebs_device_name: "sdf"
tmp_block_device: "/dev/xvdf"
tmp_mount_point: "/tmp"


cluster_user: admin
cluster_user_password: admin
cluster_system_admin: "system:admin"
scc_anyuid: False

oc_client_install_path: "/usr/local/bin"
oc_cmd: "{{ oc_client_install_path }}/oc"
oadm_cmd: "{{ oc_client_install_path }}/oadm"
kubectl_cmd: "{{ oc_client_install_path }}/kubectl"

origin_image_name: docker.io/openshift/origin
origin_image_tag: latest
oc_cluster_up_retries: 0
oc_cluster_up_base_dir: /tmp/openshift.local.clusterup
oc_host_config_dir: "{{ oc_cluster_up_base_dir }}"
persistent_vol_mount_point: "{{ oc_cluster_up_base_dir }}/openshift.local.pv"
cluster_master_config_file: "{{ oc_host_config_dir }}/kube-apiserver/master-config.yaml"

cluster_auth_htpasswd_file_name: catasb_auth_htpasswd
cluster_auth_htpasswd_config_ref: "{{ cluster_auth_htpasswd_file_name }}"
cluster_auth_htpasswd_dest_path: "{{ oc_host_config_dir }}/kube-apiserver/{{ cluster_auth_htpasswd_file_name }}"

console_cert_file_name: console-fullchain.pem
console_cert_config_ref: "{{ console_cert_file_name }}"
console_cert_dest_path: "{{ oc_host_config_dir }}/kube-apiserver/{{ console_cert_file_name }}"

console_key_file_name: console-privkey.pem
console_key_config_ref: "{{ console_key_file_name }}"
console_key_dest_path: "{{ oc_host_config_dir }}/kube-apiserver/{{ console_key_file_name }}"

asb_project: ansible-service-broker
enable_broker: true


# If you want to make changes to deploying the broker, grab a copy of the template and make local changes and update it to point to 'asb_template_url'
# remember to use a file:// path as in:
# asb_template_url: file:///path/to/file/deploy.yaml.j2
# asb_template_url: https://raw.githubusercontent.com/openshift/ansible-service-broker/master/templates/deploy-ansible-service-broker.template.yaml
# only specify asb_template_url if you want to override the lookup behavior using broker_version
k8s_asb_template_url: https://raw.githubusercontent.com/openshift/ansible-service-broker/master/templates/k8s-ansible-service-broker.yaml.j2

broker_registry_type: dockerhub
broker_registry_url: docker.io
# Need to shortern registry_name for short term due to below issue where podpreset
# name needs to be under 63 chars
#https://github.com/openshift/ansible-service-broker/issues/283
broker_registry_name: dh
broker_dev_broker: false
broker_launch_apb_on_bind: false
broker_output_request: false
broker_recovery: true
broker_enable_basic_auth: false
broker_bootstrap_refresh_interval: 600s
broker_sandbox_role: edit
broker_pull_policy: "IfNotPresent"
broker_auto_escalate: false

broker_image_name: docker.io/ansibleplaybookbundle/origin-ansible-service-broker
broker_tag: "latest"
# Used to look up different behaviors to execute based on the version of the broker
# broker_version may not always match broker_tag, example testing custom images
broker_version: "{{ broker_tag }}"
broker_image: "{{ broker_image_name }}:{{ broker_tag }}"
# Used to determine if the APB namespace should be kept
broker_keep_namespace: false
broker_keep_namespace_on_error: true
# crd is also valid,
# broker_dao_type is only for 3.10 and later brokers
broker_dao_type: "crd"

# AWS Broker
deploy_asb: True
deploy_awsservicebroker: False
awsservicebroker_dockerhub_org: awsservicebroker
awsservicebroker_asb_project: aws-service-broker
awsservicebroker_apbtag: latest

awsservicebroker_broker_registry_url: docker.io
awsservicebroker_broker_image_name: "{{ awsservicebroker_broker_registry_url }}/{{ awsservicebroker_dockerhub_org }}/aws-service-broker"
awsservicebroker_broker_tag: "latest"
awsservicebroker_broker_image: "{{ awsservicebroker_broker_image_name }}:{{ awsservicebroker_broker_tag }}"

awsservicebroker_broker_template_dir: "/tmp"
awsservicebroker_asb_template_filename: "deploy-awsservicebroker.template.yaml"
awsservicebroker_asb_template_s3_url: "https://s3.amazonaws.com/awsservicebroker/scripts/deploy-awsservicebroker.template.yaml"
awsservicebroker_asb_template_url: "file://{{ awsservicebroker_broker_template_dir }}/{{ awsservicebroker_asb_template_filename }}"
awsservicebroker_local_target_asb_template: /tmp/deploy-awsservicebroker.template.yaml.local
awsservicebroker_local_target_asb_template_processed: /tmp/deploy-awsservicebroker.template.yaml.local.processed

awsservicebroker_parameters_file: "/tmp/parameters.yml"
create_broker_secret_file_url: "https://s3.amazonaws.com/awsservicebroker/scripts/create_broker_secret.py"
create_broker_secret_script: "/tmp/create_broker_secret.py"
refresh_broker_resoure_file_url: "https://s3.amazonaws.com/awsservicebroker/scripts/refresh_broker_resource.py"
refresh_broker_resoure_script: "/tmp/refresh_broker_resoure.py"

etcd_tag: "latest"
etcd_image_name: "quay.io/coreos/etcd"
etcd_image: "{{ etcd_image_name }}:{{ etcd_tag }}"
etcd_path: "/usr/local/bin/etcd"

local_oc_client: false

# Location where we will store the local template, note this will always attempt to fetch and overwrite from 'asb_template_url'
# If you want to modify the template, modify 'asb_template_url'
local_target_asb_template: /tmp/deploy-ansible-service-broker.template.yaml.local
local_target_asb_template_processed: /tmp/deploy-ansible-service-broker.template.yaml.local.processed

deploy_rds_demo_instance: true

aws_sec_group_name: "{{ aws_tag_prefix }}_sg"

aws_openshift_sec_group_name: "{{ aws_sec_group_name }}_openshift"
aws_k8s_sec_group_name: "{{ aws_sec_group_name }}_k8s"
aws_egress_allow_sec_group_name: "{{ aws_sec_group_name }}_egress_allow"
aws_squid_sec_group_name: "{{ aws_sec_group_name }}_squid"

vpc_name: "{{ aws_tag_prefix }}_vpc"
vpc_cidr_block: "10.0.0.0/16"
vpc_subnet_cidr: "10.0.0.0/24"
vpc_subnet_name: "{{ aws_tag_prefix }}_subnet"
vpc_subnet_a_cidr: "10.0.0.0/24"
vpc_subnet_a_name: "{{ aws_tag_prefix }}_subnet_a"
vpc_subnet_b_cidr: "10.0.1.0/24"
vpc_subnet_b_name: "{{ aws_tag_prefix }}_subnet_b"
vpc_gateway_name: "{{ aws_tag_prefix }}_igw"
vpc_route_table_name: "{{ aws_tag_prefix }}_route_table"
rds_subnet_group_name: "{{ aws_tag_prefix }}_rds_group"

# If true, will remove all docker images from 'docker_images_group1'
remove_docker_images: false

rcm: false
# asb_scheme specifies if the route for the broker is using http or https
# for older builds such as release-0.9 only http is supported
# newer builds default to https
asb_scheme: https

# These docker images we want to remove and fetch on each setup
docker_images_group1:
  - { img: "{{ broker_image_name }}", tag: "{{ broker_tag }}" }
  - { img: "{{ origin_image_name }}-service-catalog", tag: "{{ origin_image_tag }}" }
  - { img: "{{ awsservicebroker_broker_image_name }}", tag: "{{ awsservicebroker_broker_tag }}" }

# These docker images change less frequently, we are OK pulling them once and reusing
docker_images_group2:
  - { img: "{{ etcd_image_name }}", tag: "{{ etcd_tag }}" }
  - { img: "{{ origin_image_name }}", tag: "{{ origin_image_tag }}" }
  - { img: "{{ origin_image_name }}-deployer", tag: "{{ origin_image_tag }}" }
  - { img: "{{ origin_image_name }}-docker-registry", tag: "{{ origin_image_tag }}" }
  - { img: "{{ origin_image_name }}-haproxy-router", tag: "{{ origin_image_tag }}" }
  - { img: "{{ origin_image_name }}-pod", tag: "{{ origin_image_tag }}" }
  - { img: "{{ origin_image_name }}-recycler", tag: "{{ origin_image_tag }}" }

docker_images_group3:
  - { img: "{{ origin_image_name }}-template-service-broker", tag: "{{ origin_image_tag }}" }
  - { img: "{{ origin_image_name }}-web-console", tag: "{{ origin_image_tag }}" }

docker_images_group4:
  - { img: "{{ origin_image_name }}-control-plane", tag: "{{ origin_image_tag }}" }
  - { img: "{{ origin_image_name }}-hyperkube", tag: "{{ origin_image_tag }}" }
  - { img: "{{ origin_image_name }}-hypershift", tag: "{{ origin_image_tag }}" }
  - { img: "{{ origin_image_name }}-node", tag: "{{ origin_image_tag }}" }

docker_images_group5:
  - { img: "{{ origin_image_name }}-cli", tag: "{{ origin_image_tag }}" }
  - { img: "{{ origin_image_name }}-service-serving-cert-signer", tag: "v3.11" }

docker_images_group6:
  - { img: "{{ origin_image_name }}-sti-builder", tag: "{{ origin_image_tag }}" }

coalmine_svc_catalog: quay.io/kubernetes-service-catalog/service-catalog:canary
